datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Motion {
  id         Int      @default(autoincrement()) @id
  body       String?
  action     String?
  actionData Json?
  stage      String   @default("voting")
  version    Int      @default(1)
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int?
  group      Group?    @relation(fields: [groupId], references: [id])
  groupId    Int?
  votes      Vote[]
  comments   Comment[]
  likes      Like[]
  images     Image[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Vote {
  id        Int      @default(autoincrement()) @id
  body      String?
  flipState String?
  verified  Boolean  @default(false)
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  motion    Motion?    @relation(fields: [motionId], references: [id])
  motionId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, motionId])
}

model User {
  id               Int      @default(autoincrement()) @id
  name             String
  email            String
  password         String
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  groupMemberships GroupMember[]
  memberRequests   MemberRequest[]
  motions          Motion[]
  votes            Vote[]
  images           Image[]
  followers        Follow[] @relation("Followers")
  following        Follow[] @relation("Following")
  settings         Setting[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Post {
  id        Int      @default(autoincrement()) @id
  body      String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  group     Group?    @relation(fields: [groupId], references: [id])
  groupId   Int?
  comments  Comment[]
  likes     Like[]
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @default(autoincrement()) @id
  body      String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  motion    Motion?  @relation(fields: [motionId], references: [id])
  motionId  Int?
  likes     Like[]
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id         Int      @default(autoincrement()) @id
  user       User?    @relation("Followers", fields: [userId], references: [id])
  userId     Int?
  follower   User?    @relation("Following", fields: [followerId], references: [id])
  followerId Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, followerId])
}

model Like {
  id        Int      @default(autoincrement()) @id
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  motion    Motion?  @relation(fields: [motionId], references: [id])
  motionId  Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId, commentId])
}

model Group {
  id             Int      @default(autoincrement()) @id
  name           String
  description    String
  images         Image[]
  posts          Post[]
  motions        Motion[]
  members        GroupMember[]
  memberRequests MemberRequest[]
  settings       Setting[]
  creatorId      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model GroupMember {
  id          Int      @default(autoincrement()) @id
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  group       Group?   @relation(fields: [groupId], references: [id])
  groupId     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, groupId])
}

model MemberRequest {
  id          Int      @default(autoincrement()) @id
  status      String   @default("pending")
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  group       Group?   @relation(fields: [groupId], references: [id])
  groupId     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, groupId])
}

model Image {
  id             Int      @default(autoincrement()) @id
  path           String
  user           User?    @relation(fields: [userId], references: [id])
  userId         Int?
  post           Post?    @relation(fields: [postId], references: [id])
  postId         Int?
  motion         Motion?  @relation(fields: [motionId], references: [id])
  motionId       Int?
  comment        Comment? @relation(fields: [commentId], references: [id])
  commentId      Int?
  group          Group? @relation(fields: [groupId], references: [id])
  groupId        Int?
  profilePicture Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Setting {
  id        Int      @default(autoincrement()) @id
  name      String
  value     String
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  group     Group?    @relation(fields: [groupId], references: [id])
  groupId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}